use crate::app::hsr::{
    basics::Element,
    units::{
        AdvancedStat, BuffScaling, ConfigType, DOTKind, Modifier, ModifierConfig, ModifierData,
        ModifierTarget, Source, Stat, UnitKind,
    },
};

use super::{ModifierOrDOT, Unit};

pub fn modifiers(unit: &Unit) -> Vec<ModifierOrDOT> {
    vec![
        ModifierOrDOT::DOT(DOTKind::Standard(
            Element::Fire,
            SKILL_PARAMS[(unit.unique_data.skill_level
                + if unit.unique_data.eidolon >= 2 { 2 } else { 0 })
                as usize]
                .3,
        )),
        ModifierOrDOT::Modifier(Modifier::new_with_config(
            (UnitKind::Guinaifen, Source::Talent),
            vec![ModifierData::new(
                ModifierTarget::Enemy,
                Stat::Advanced(AdvancedStat::Vulnerability),
                BuffScaling::Additive,
                |_, buffer, config_data, _, _, _| {
                    let talent_bonus = if buffer.unique_data.eidolon >= 5 {
                        2
                    } else {
                        0
                    };
                    config_data
                        .and_then(|config| Some(config.get_index() as f32))
                        .unwrap_or(0.)
                        * TALENT_PARAMS[(buffer.unique_data.talent_level + talent_bonus) as usize].3
                },
            )],
            Some(ModifierConfig::new(ConfigType::Stacks(3))),
            true,
        )),
    ]
}

const SKILL_PARAMS: [(f32, f32, f32, f32, f32); 15] = [
    (0.6000, 0.2000, 1.0000, 0.8390, 2.0000),
    (0.6600, 0.2200, 1.0000, 0.9230, 2.0000),
    (0.7200, 0.2400, 1.0000, 1.0069, 2.0000),
    (0.7800, 0.2600, 1.0000, 1.0909, 2.0000),
    (0.8400, 0.2800, 1.0000, 1.1748, 2.0000),
    (0.9000, 0.3000, 1.0000, 1.3007, 2.0000),
    (0.9750, 0.3250, 1.0000, 1.4686, 2.0000),
    (1.0500, 0.3500, 1.0000, 1.6784, 2.0000),
    (1.1250, 0.3750, 1.0000, 1.9303, 2.0000),
    (1.2000, 0.4000, 1.0000, 2.1821, 2.0000),
    (1.2600, 0.4200, 1.0000, 2.2912, 2.0000),
    (1.3200, 0.4400, 1.0000, 2.4003, 2.0000),
    (1.3800, 0.4600, 1.0000, 2.5094, 2.0000),
    (1.4400, 0.4800, 1.0000, 2.6186, 2.0000),
    (1.5000, 0.5000, 1.0000, 2.7277, 2.0000),
];

const ULT_PARAMS: [(f32, f32); 15] = [
    (0.7200, 0.7200),
    (0.7680, 0.7400),
    (0.8160, 0.7600),
    (0.8640, 0.7800),
    (0.9120, 0.8000),
    (0.9600, 0.8200),
    (1.0200, 0.8450),
    (1.0800, 0.8700),
    (1.1400, 0.8950),
    (1.2000, 0.9200),
    (1.2480, 0.9400),
    (1.2960, 0.9600),
    (1.3440, 0.9800),
    (1.3920, 1.0000),
    (1.4400, 1.0200),
];

const TALENT_PARAMS: [(f32, f32, f32, f32, f32, f32); 15] = [
    (1.0000, 0.0000, 0.0000, 0.0400, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0430, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0460, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0490, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0520, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0550, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0587, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0625, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0663, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0700, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0730, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0760, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0790, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0820, 3.0000, 3.0000),
    (1.0000, 0.0000, 0.0000, 0.0850, 3.0000, 3.0000),
];

const TECH_PARAMS: [(f32, f32, f32); 1] = [(0.5000, 4.0000, 1.0000)];

const BASIC_PARAMS: [f32; 9] = [
    0.5000, 0.6000, 0.7000, 0.8000, 0.9000, 1.0000, 1.1000, 1.2000, 1.3000,
];
