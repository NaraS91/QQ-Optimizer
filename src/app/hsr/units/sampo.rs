use crate::app::hsr::utils::value_with_buffer;

use super::{
    AdvancedStat, BuffScaling, Modifier, ModifierData, ModifierOrDOT, ModifierTarget, Source, Stat,
    Unit,
};

pub fn modifiers(unit: &Unit) -> Vec<ModifierOrDOT> {
    vec![ModifierOrDOT::Modifier(Modifier::new(
        (unit.kind, Source::Ultimate),
        vec![ModifierData::new(
            ModifierTarget::Enemies,
            Stat::Advanced(AdvancedStat::TotalDmgReceived(
                AdvancedStat::create_dmg_bonus_flag(0, 0, 0, 1, 0),
            )),
            BuffScaling::Additive,
            value_with_buffer!(|buffer: &Unit| {
                let ult_index = (buffer.unique_data.ultimate_level
                    + if buffer.unique_data.eidolon >= 5 {
                        2
                    } else {
                        0
                    }) as usize;

                ULT_PARAMS[ult_index].1
            }),
        )],
        true,
    ))]
}

const SKILL_PARAMS: [(f32, f32); 15] = [
    (4.0000, 0.2800),
    (4.0000, 0.3080),
    (4.0000, 0.3360),
    (4.0000, 0.3640),
    (4.0000, 0.3920),
    (4.0000, 0.4200),
    (4.0000, 0.4550),
    (4.0000, 0.4900),
    (4.0000, 0.5250),
    (4.0000, 0.5600),
    (4.0000, 0.5880),
    (4.0000, 0.6160),
    (4.0000, 0.6440),
    (4.0000, 0.6720),
    (4.0000, 0.7000),
];

const ULT_PARAMS: [(f32, f32, f32, f32); 15] = [
    (0.9600, 0.2000, 2.0000, 1.0000),
    (1.0240, 0.2100, 2.0000, 1.0000),
    (1.0880, 0.2200, 2.0000, 1.0000),
    (1.1520, 0.2300, 2.0000, 1.0000),
    (1.2160, 0.2400, 2.0000, 1.0000),
    (1.2800, 0.2500, 2.0000, 1.0000),
    (1.3600, 0.2625, 2.0000, 1.0000),
    (1.4400, 0.2750, 2.0000, 1.0000),
    (1.5200, 0.2875, 2.0000, 1.0000),
    (1.6000, 0.3000, 2.0000, 1.0000),
    (1.6640, 0.3100, 2.0000, 1.0000),
    (1.7280, 0.3200, 2.0000, 1.0000),
    (1.7920, 0.3300, 2.0000, 1.0000),
    (1.8560, 0.3400, 2.0000, 1.0000),
    (1.9200, 0.3500, 2.0000, 1.0000),
];

const TALENT_PARAMS: [(f32, f32, f32, f32); 15] = [
    (0.6500, 0.2000, 3.0000, 5.0000),
    (0.6500, 0.2200, 3.0000, 5.0000),
    (0.6500, 0.2400, 3.0000, 5.0000),
    (0.6500, 0.2600, 3.0000, 5.0000),
    (0.6500, 0.2800, 3.0000, 5.0000),
    (0.6500, 0.3100, 3.0000, 5.0000),
    (0.6500, 0.3500, 3.0000, 5.0000),
    (0.6500, 0.4000, 3.0000, 5.0000),
    (0.6500, 0.4600, 3.0000, 5.0000),
    (0.6500, 0.5200, 3.0000, 5.0000),
    (0.6500, 0.5460, 3.0000, 5.0000),
    (0.6500, 0.5720, 3.0000, 5.0000),
    (0.6500, 0.5980, 3.0000, 5.0000),
    (0.6500, 0.6240, 3.0000, 5.0000),
    (0.6500, 0.6500, 3.0000, 5.0000),
];

const TECH_PARAMS: [(f32, f32, f32); 1] = [(10.0000, 1.0000, 0.2500)];

const BASIC_PARAMS: [f32; 9] = [
    0.5000, 0.6000, 0.7000, 0.8000, 0.9000, 1.0000, 1.1000, 1.2000, 1.3000,
];
